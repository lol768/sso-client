1) Include sso-client.jar in your deploy directory and your project classpath in Eclipse.
Also put all of the dist/dependencies/*.jar files in your JBoss classpath (%JBOSS_HOME/server/default/lib).

Put the dist/dependencies/endorsed/*.jar in your %JAVA_HOME/jre/lib/endorsed/ directory
(or just copy the endorsed directory if this does not already exist).  Delete existing xerces and xml
api jar files.

Put the dist/dependencies/endorsed/*.jar in your %JBOSS_HOME%/lib/endorsed/ directory
(or just copy the endorsed directory if this does not already exist).
Delete existing xerces and xml api jar files.

2) Add the following snippets to your web.xml:

<!-- The "/sso-config.xml" reference should be renamed to be more specific to your web app, eg. "/blogs-sso-config.xml" -->
	<context-param>
		<param-name>ssoclient.config</param-name>
		<param-value>/myapp-sso-config.xml</param-value>
	</context-param>

	<filter>
		<filter-name>SSOClientFilter</filter-name>
		<filter-class>uk.ac.warwick.sso.client.SSOClientFilter</filter-class>
	</filter>

	<!-- map this filter over everything that will be protected by SSO -->
	<filter-mapping>
		<filter-name>SSOClientFilter</filter-name>
		<url-pattern>*.spr</url-pattern>
	</filter-mapping>

	<listener>
		<listener-class>uk.ac.warwick.sso.client.SSOConfigLoader</listener-class>
	</listener>

  	<servlet>
		<servlet-name>ShireServlet</servlet-name>
		<display-name>Shire</display-name>
		<servlet-class>uk.ac.warwick.sso.client.ShireServlet</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>LogoutServlet</servlet-name>
		<display-name>Logout</display-name>
		<servlet-class>uk.ac.warwick.sso.client.LogoutServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>ShireServlet</servlet-name>
		<url-pattern>/shire</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>LogoutServlet</servlet-name>
		<url-pattern>/logout</url-pattern>
	</servlet-mapping>

(Unless your web.xml is generated by XDoclet, then you need to add these to the relevant files in the merge dir)

If you want to force logins, use the following filter:

	<filter>
		<filter-name>ForceLoginFilter</filter-name>
		<filter-class>uk.ac.warwick.sso.client.ForceLoginFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>ForceLoginFilter</filter-name>
		<url-pattern>/adminpages/*</url-pattern>
	</filter-mapping>



3) Copy and rename (as above) the example "sso-config.xml" file from the sso-client dist directory to your JBoss conf directory

4) Edit this file to get all of the right settings for your service

5) Alter your code where you get the logged in user to simply get the User object out of the request from the SSO_USER key

6) Alter your login links to look something like this:

<c:choose>
  <c:when test="${SSO_USER != null && SSO_USER.loggedIn == true}">
    <p><a href="<sso:logoutlink />">Sign out</a></p>
  </c:when>
  <c:otherwise>
    <p><a href="<sso:loginlink />">Sign in</a></p>
  </c:otherwise>
</c:choose>

Or

SSOLoginLinkGenerator generator = new SSOLoginLinkGenerator();
generator.setRequest(request);
String loginUrl = generator.getLoginUrl();

7) Email elab with a request for an SSL certificate if you don't have one.  

8)  Send following settings to SSO Administrator:

provider id:
e.g. <providerid>urn:go.warwick.ac.uk:sarahgoto:service</providerid>

root url (combo of hostname/path)
e.g. http://host-137-205-194-214.csv.warwick.ac.uk:8080/goto

alias:
e.g. Sarah's Go Test

name and email of person responsible for service:

url of your Shire:
e.g. https://host-137-205-194-214.csv.warwick.ac.uk:8080/goto/shire

your logout url:
e.g. https://host-137-205-194-214.csv.warwick.ac.uk:8080/goto/logout

9) Configure Apache/Jboss to run SSL with the right certificates...hard.

# cp <your_domain_name>.crt /usr/local/apache/conf/ssl.crt/
# cd /usr/local/apache/conf/ssl.crt/
link in certificate so it can be seen by apache properly
# ln -s <your_domain_name>.crt `openssl x509 -noout -hash -in <your_domain_name>.crt`.0


10)

add this snippet to your Jboss deploy dir/jbossweb-tomcat50.sar/server.xml:

      <Connector port="443"
                     maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
                     enableLookups="false" disableUploadTimeout="true"
                     acceptCount="100" debug="0" scheme="https" secure="true"
                     clientAuth="false" sslProtocol="TLS" keystoreFile="C:\apps\jboss\server\default\conf\host-137-205-194-214.csv.warwick.ac.uk.keystore"
                     keystorePass="changeit"
                     truststoreFile="C:\j2sdk1.4.2_02\jre\lib\security\cacerts"
               truststorePass="changeit" />

(amending file names as appropriate)
